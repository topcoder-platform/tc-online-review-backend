/*
 * Copyright (C) 2006-2013 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.onlinereview.component.review;

import com.topcoder.onlinereview.component.search.filter.Filter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * This DefaultReviewManager class is the default implementation of ReviewManager. It actually
 * delegates the work to the pluggable persistence to create, update, delete and search review
 * entities. The review entity ids will be generated by the inner persistence class. Additionally,
 * It can also be used to add comment for review and item, and get all the comment types from the
 * manager.
 *
 * <p>A sample configuration file is shown here:
 *
 * <pre>
 * &lt;CMConfig&gt;
 *     &lt;Config name=&quot;com.topcoder.management.review.DefaultReviewManager&quot;&gt;
 *         &lt;Property name=&quot;persistence&quot;&gt;
 *             &lt;Property name=&quot;persistence_class&quot;&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *             &lt;Property name=&quot;persistence_namespace&quot;&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *         &lt;/Property&gt;
 *     &lt;/Config&gt;
 * &lt;/CMConfig&gt;
 * </pre>
 *
 * <p>Examples of usage of <code>DefaultReviewManager</code> :
 *
 * <pre>
 * // create a manager instance from default namespace.
 * manager = new DefaultReviewManager();
 *
 * // create a manager instance from specified namespace.
 * manager = new DefaultReviewManager(NAMESPACE);
 *
 * // create a manager instance from given persistence.
 * manager = new DefaultReviewManager(persistence);
 *
 * // create a review into the manager.
 * manager.createReview(review, &quot;createReviewer&quot;);
 *
 * // create another review into the manager.
 * manager.createReview(new Review(2), &quot;createReviewer&quot;);
 *
 * // update the review with id = 2 in the manager.
 * Review updatedReview = new Review(2);
 * updatedReview.addItem(new Item(1));
 * manager.updateReview(updatedReview, &quot;updateReviewer&quot;);
 *
 * // update this review again in the manager.
 * updatedReview.addItem(new Item(2));
 * manager.updateReview(updatedReview, &quot;updateReviewer&quot;);
 *
 * // get the review from manager with its id.
 * Review getReview = manager.getReview(1);
 *
 * // get all comment types from manager.
 * CommentType[] commentTypes = manager.getAllCommentTypes();
 *
 * // add comment for review in manager.
 * Comment reviewComment = new Comment(1, 10001, &quot;good&quot;);
 * manager.addReviewComment(review.getId(), reviewComment, &quot;someReviewer&quot;);
 *
 * // add comment for item in manager.
 * Comment itemComment = new Comment(1, 10001, &quot;ok&quot;);
 * manager.addReviewComment(1, itemComment, &quot;someReviewer&quot;);
 *
 * // search the review from manager with simple filter.
 *
 * // search for the reviews which have been committed.
 * Review[] reviews = manager.searchReviews(equalFilter, true);
 *
 * // search the review from manager with 'chain' filter.
 *
 * // search for the reviews which have been committed and
 * // project is greater than 10001, or reviewer id is less than 10000.
 * ChainFilter cf = new ChainFilter(equalFilter);
 * cf = cf.and(greaterThanFilter).or(lessThanFilter);
 *
 * reviews = manager.searchReviews(cf.getFilter(), true);
 *
 * // remove review with ID equal to 1
 * manager.removeReview(1, &quot;manager&quot;);
 * </pre>
 *
 * <p><em>Changes in 1.2:</em>
 *
 * <ol>
 *   <li>Moved checkString/createObject/getProperty/getValue methods from Helper class.
 *   <li>Added removeReview() method.
 *   <li>Changed the thread safety information.
 * </ol>
 *
 * <p><strong>Thread Safety: </strong> This class is immutable, and thread safe when entities passed
 * to it are used by the caller in thread safe manner. It uses thread safe ReviewPersistence
 * implementation instance.
 *
 * @author woodjhon, icyriver, saarixx, sparemax
 * @version 1.2.1
 */
@Component
public class ReviewManager {
  /**
   * This variable represents the <code>ReviewPersistence</code> instance which performs the
   * persistence functionality for this manager.
   */
  @Autowired private ReviewPersistence persistence;

  /**
   * This method will create the review entity in the manager. Here it simply delegates this work to
   * the pluggable persistence.
   *
   * @param review the review entity to be created in the manager.
   * @param operator the operator who creates the review entity.
   * @throws IllegalArgumentException if any argument is null, or operator is empty string, or
   *     review fails to pass the validation.
   * @throws DuplicateReviewEntityException if review ID already exists.
   * @throws ReviewPersistenceException if failed to create the instance in the persistence.
   */
  public void createReview(Review review, String operator) throws ReviewPersistenceException {
    persistence.createReview(review, operator);
  }

  /**
   * This method will update the review entity in the manager. Here it simply delegates this work to
   * the pluggable persistence.
   *
   * @param review the review entity to update into the manager.
   * @param operator the operator who updates the review entity.
   * @throws IllegalArgumentException if either of arguments is null, or operator is empty string,
   *     or review fails to pass the validation.
   * @throws ReviewEntityNotFoundException if given review ID does not exist.
   * @throws ReviewPersistenceException if any other error occurred.
   */
  public void updateReview(Review review, String operator) throws ReviewPersistenceException {
    persistence.updateReview(review, operator);
  }

  /**
   * This method will get the review entity from the manager with given review entity id. Here it
   * simply delegates this work to the pluggable persistence.
   *
   * @param id the id of the review entity to be retrieved.
   * @return the retrieved review entity with its id.
   * @throws IllegalArgumentException if the given id is not positive.
   * @throws ReviewEntityNotFoundException if given ID does not exist in the database.
   * @throws ReviewPersistenceException if any other error occurred.
   */
  public Review getReview(long id) throws ReviewPersistenceException {
    return persistence.getReview(id);
  }

  /**
   * This method will search the review entities with the given search filters. Here it simply
   * delegates this work to the pluggable persistence.
   *
   * <p>Five fields supported by the <code>searchReviews</code> method in version 1.0:
   *
   * <ul>
   *   <li>scorecardType - the score card type, must be Long type.
   *   <li>submission - the review submission id, must be Long type.
   *   <li>projectPhase - the project phase id, must be Long type.
   *   <li>reviewer - the author of the review, must be Long type.
   *   <li>project - the project id of the review, must be Long type.
   *   <li>committed --- indicate if the review has been committed, using Integer(1) representing
   *       committed, or Integer(0) representing not committed.
   * </ul>
   *
   * @param filter the filter that specifies the search conditions.
   * @param complete a boolean variable indicating if the complete review data is retrieved.
   * @return the array of matching review entities, or empty array if no review entity matches the
   *     filter.
   * @throws IllegalArgumentException if the filter is null.
   * @throws ReviewPersistenceException if failed to search the reviews.
   */
  public Review[] searchReviews(Filter filter, boolean complete) throws ReviewPersistenceException {
    return persistence.searchReviews(filter, complete);
  }

  /**
   * This method will add comment to review with given review id. Here it simply delegates this work
   * to the pluggable persistence.
   *
   * @param reviewId the id of review entity.
   * @param comment the <code>Comment</code> instance to be added.
   * @param operator the operator who adds the comment.
   * @throws IllegalArgumentException if any argument is null, or reviewId is not positive, or
   *     operator is empty string.
   * @throws ReviewEntityNotFoundException if reviewId does not exists.
   * @throws ReviewPersistenceException if any other error occurred.
   */
  public void addReviewComment(long reviewId, Comment comment, String operator)
      throws ReviewPersistenceException {
    persistence.addReviewComment(reviewId, comment, operator);
  }

  /**
   * This method will add the comment to the item with given item id. Here it simply delegates this
   * work to the pluggable persistence.
   *
   * @param itemId the item id.
   * @param comment the <code>Comment</code> instance to be added.
   * @param operator the operator who adds the comment.
   * @throws IllegalArgumentException if any argument is null, or itemId is not positive, or
   *     operator is empty string.
   * @throws ReviewEntityNotFoundException if itemId does not exists.
   * @throws ReviewPersistenceException if any other error occurred.
   */
  public void addItemComment(long itemId, Comment comment, String operator)
      throws ReviewPersistenceException {
    persistence.addItemComment(itemId, comment, operator);
  }

  /**
   * This method will get all the <code>CommentType</code> instance from the manager. Here it simply
   * delegates this work to the pluggable persistence.
   *
   * @return the array of all <code>CommentType</code> instances from the persistence, or empty
   *     array if no comment type can be found.
   * @throws ReviewPersistenceException if failed to get the types.
   */
  public CommentType[] getAllCommentTypes() throws ReviewPersistenceException {
    return persistence.getAllCommentTypes();
  }

  /**
   * Removes the review with the specified ID. All its review items, associated comments and uploads
   * are also removed. Here it simply delegates this work to the pluggable persistence.
   *
   * @param id the ID of the review to be deleted.
   * @param operator the operator who deletes the review entity.
   * @throws IllegalArgumentException if the id is not positive or operator is null/empty.
   * @throws ReviewEntityNotFoundException if review with the given ID does not exist in the
   *     database.
   * @throws ReviewPersistenceException if any other error occurred.
   * @since 1.2
   */
  public void removeReview(long id, String operator) throws ReviewPersistenceException {
    persistence.removeReview(id, operator);
  }
}
