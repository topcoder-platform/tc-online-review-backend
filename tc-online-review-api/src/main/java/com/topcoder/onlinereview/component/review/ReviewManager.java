/*
 * Copyright (C) 2006-2013 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.onlinereview.component.review;

import com.topcoder.search.builder.filter.Filter;
import com.topcoder.util.config.ConfigManager;
import com.topcoder.util.config.ConfigManagerException;
import com.topcoder.util.config.Property;
import org.springframework.stereotype.Component;

import java.lang.reflect.InvocationTargetException;

/**
 * <p>
 * This DefaultReviewManager class is the default implementation of ReviewManager. It actually delegates the work to
 * the pluggable persistence to create, update, delete and search review entities. The review entity ids will be
 * generated by the inner persistence class. Additionally, It can also be used to add comment for review and item, and
 * get all the comment types from the manager.
 * </p>
 *
 * <p>
 * A sample configuration file is shown here:
 *
 * <pre>
 * &lt;CMConfig&gt;
 *     &lt;Config name=&quot;com.topcoder.management.review.DefaultReviewManager&quot;&gt;
 *         &lt;Property name=&quot;persistence&quot;&gt;
 *             &lt;Property name=&quot;persistence_class&quot;&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *             &lt;Property name=&quot;persistence_namespace&quot;&gt;
 *                 &lt;Value&gt;
 *                 com.topcoder.management.review.persistence.InformixReviewPersistence
 *                 &lt;/Value&gt;
 *             &lt;/Property&gt;
 *         &lt;/Property&gt;
 *     &lt;/Config&gt;
 * &lt;/CMConfig&gt;
 * </pre>
 *
 * </p>
 *
 * <p>
 * Examples of usage of <code>DefaultReviewManager</code> :
 *
 * <pre>
 * // create a manager instance from default namespace.
 * manager = new DefaultReviewManager();
 *
 * // create a manager instance from specified namespace.
 * manager = new DefaultReviewManager(NAMESPACE);
 *
 * // create a manager instance from given persistence.
 * manager = new DefaultReviewManager(persistence);
 *
 * // create a review into the manager.
 * manager.createReview(review, &quot;createReviewer&quot;);
 *
 * // create another review into the manager.
 * manager.createReview(new Review(2), &quot;createReviewer&quot;);
 *
 * // update the review with id = 2 in the manager.
 * Review updatedReview = new Review(2);
 * updatedReview.addItem(new Item(1));
 * manager.updateReview(updatedReview, &quot;updateReviewer&quot;);
 *
 * // update this review again in the manager.
 * updatedReview.addItem(new Item(2));
 * manager.updateReview(updatedReview, &quot;updateReviewer&quot;);
 *
 * // get the review from manager with its id.
 * Review getReview = manager.getReview(1);
 *
 * // get all comment types from manager.
 * CommentType[] commentTypes = manager.getAllCommentTypes();
 *
 * // add comment for review in manager.
 * Comment reviewComment = new Comment(1, 10001, &quot;good&quot;);
 * manager.addReviewComment(review.getId(), reviewComment, &quot;someReviewer&quot;);
 *
 * // add comment for item in manager.
 * Comment itemComment = new Comment(1, 10001, &quot;ok&quot;);
 * manager.addReviewComment(1, itemComment, &quot;someReviewer&quot;);
 *
 * // search the review from manager with simple filter.
 *
 * // search for the reviews which have been committed.
 * Review[] reviews = manager.searchReviews(equalFilter, true);
 *
 * // search the review from manager with 'chain' filter.
 *
 * // search for the reviews which have been committed and
 * // project is greater than 10001, or reviewer id is less than 10000.
 * ChainFilter cf = new ChainFilter(equalFilter);
 * cf = cf.and(greaterThanFilter).or(lessThanFilter);
 *
 * reviews = manager.searchReviews(cf.getFilter(), true);
 *
 * // remove review with ID equal to 1
 * manager.removeReview(1, &quot;manager&quot;);
 * </pre>
 *
 * </p>
 *
 * <p>
 * <em>Changes in 1.2:</em>
 * <ol>
 * <li>Moved checkString/createObject/getProperty/getValue methods from Helper class.</li>
 * <li>Added removeReview() method.</li>
 * <li>Changed the thread safety information.</li>
 * </ol>
 * </p>
 *
 * <p>
 * <strong>Thread Safety: </strong> This class is immutable, and thread safe when entities passed to it are used by
 * the caller in thread safe manner. It uses thread safe ReviewPersistence implementation instance.
 * </p>
 *
 * @author woodjhon, icyriver, saarixx, sparemax
 * @version 1.2.1
 */
@Component
public class ReviewManager {
    /**
     * <p>
     * This variable represents the default namespace of <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String DEFAULT_NAMESPACE = DefaultReviewManager.class.getName();

    /**
     * <p>
     * This variable represents the name of persistence property for creating the <code>DefaultReviewManager</code>
     * class.
     * </p>
     */
    private static final String PERSISTENCE_PROPERTY = "persistence";

    /**
     * <p>
     * This variable represents the name of persistence class property for creating the
     * <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String PERSISTENCE_CLASS_PROPERTY = "persistence_class";

    /**
     * <p>
     * This variable represents the name of persistence namespace property for creating the
     * <code>DefaultReviewManager</code> class.
     * </p>
     */
    private static final String PERSISTENCE_NAMESPACE_PROPERTY = "persistence_namespace";

    /**
     * <p>
     * This variable represents the <code>ReviewPersistence</code> instance which performs the persistence
     * functionality for this manager.
     * </p>
     */
    private final ReviewPersistence persistence;

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instance from the default namespace.
     * </p>
     *
     * @throws ConfigurationException
     *             if any error occurred when creating.
     */
    public ReviewManager() throws ConfigurationException {
        this(DEFAULT_NAMESPACE);
    }

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instance from the given namespace.
     * </p>
     *
     * @param namespace
     *            the configuration namespace.
     *
     * @throws IllegalArgumentException
     *             if namespace is null or empty string.
     * @throws ConfigurationException
     *             if any other error occurred when creating.
     */
    public ReviewManager(String namespace) throws ConfigurationException {
        checkString(namespace, "namespace");

        // get properties and create the persistence.
        Property property = getProperty(namespace, PERSISTENCE_PROPERTY);
        String psName = getValue(property, PERSISTENCE_CLASS_PROPERTY, true);
        String psNamespace = getValue(property, PERSISTENCE_NAMESPACE_PROPERTY, false);
        Object obj = createObject(psName, psNamespace);

        // check the instance's type.
        if (!(obj instanceof ReviewPersistence)) {
            throw new ConfigurationException("The Class: '" + psName
                + "' isn't the instance of the ReviewPersistence implementation class.");
        }

        // set the persistence here.
        this.persistence = (ReviewPersistence) obj;
    }

    /**
     * <p>
     * Create the <code>DefaultReviewManager</code> instance with given persistence.
     * </p>
     *
     * @param persistence
     *            the persistence to set.
     *
     * @throws IllegalArgumentException
     *             if the persistence is null.
     */
    public ReviewManager(ReviewPersistence persistence) {
        Helper.checkNull(persistence, "persistence");
        this.persistence = persistence;
    }

    /**
     * <p>
     * This method will create the review entity in the manager. Here it simply delegates this work to the pluggable
     * persistence.
     * </p>
     *
     * @param review
     *            the review entity to be created in the manager.
     * @param operator
     *            the operator who creates the review entity.
     *
     * @throws IllegalArgumentException
     *             if any argument is null, or operator is empty string, or review fails to pass the validation.
     * @throws DuplicateReviewEntityException
     *             if review ID already exists.
     * @throws ReviewPersistenceException
     *             if failed to create the instance in the persistence.
     */
    public void createReview(Review review, String operator) throws ReviewPersistenceException {
        persistence.createReview(review, operator);
    }

    /**
     * <p>
     * This method will update the review entity in the manager. Here it simply delegates this work to the pluggable
     * persistence.
     * </p>
     *
     * @param review
     *            the review entity to update into the manager.
     * @param operator
     *            the operator who updates the review entity.
     *
     * @throws IllegalArgumentException
     *             if either of arguments is null, or operator is empty string, or review fails to pass the
     *             validation.
     * @throws ReviewEntityNotFoundException
     *             if given review ID does not exist.
     * @throws ReviewPersistenceException
     *             if any other error occurred.
     */
    public void updateReview(Review review, String operator) throws ReviewPersistenceException {
        persistence.updateReview(review, operator);
    }

    /**
     * <p>
     * This method will get the review entity from the manager with given review entity id. Here it simply delegates
     * this work to the pluggable persistence.
     * </p>
     *
     * @param id
     *            the id of the review entity to be retrieved.
     *
     * @return the retrieved review entity with its id.
     *
     * @throws IllegalArgumentException
     *             if the given id is not positive.
     * @throws ReviewEntityNotFoundException
     *             if given ID does not exist in the database.
     * @throws ReviewPersistenceException
     *             if any other error occurred.
     */
    public Review getReview(long id) throws ReviewPersistenceException {
        return persistence.getReview(id);
    }

    /**
     * <p>
     * This method will search the review entities with the given search filters. Here it simply delegates this work
     * to the pluggable persistence.
     * </p>
     *
     * <p>
     * Five fields supported by the <code>searchReviews</code> method in version 1.0:
     * <ul>
     * <li> scorecardType - the score card type, must be Long type. </li>
     * <li> submission - the review submission id, must be Long type. </li>
     * <li> projectPhase - the project phase id, must be Long type. </li>
     * <li> reviewer - the author of the review, must be Long type. </li>
     * <li> project - the project id of the review, must be Long type. </li>
     * <li> committed --- indicate if the review has been committed, using Integer(1) representing committed, or
     * Integer(0) representing not committed. </li>
     * </ul>
     * </p>
     *
     * @param filter
     *            the filter that specifies the search conditions.
     * @param complete
     *            a boolean variable indicating if the complete review data is retrieved.
     *
     * @return the array of matching review entities, or empty array if no review entity matches the filter.
     *
     * @throws IllegalArgumentException
     *             if the filter is null.
     * @throws ReviewPersistenceException
     *             if failed to search the reviews.
     */
    public Review[] searchReviews(Filter filter, boolean complete) throws ReviewPersistenceException {
        return persistence.searchReviews(filter, complete);
    }

    /**
     * <p>
     * This method will add comment to review with given review id. Here it simply delegates this work to the
     * pluggable persistence.
     * </p>
     *
     * @param reviewId
     *            the id of review entity.
     * @param comment
     *            the <code>Comment</code> instance to be added.
     * @param operator
     *            the operator who adds the comment.
     *
     * @throws IllegalArgumentException
     *             if any argument is null, or reviewId is not positive, or operator is empty string.
     * @throws ReviewEntityNotFoundException
     *             if reviewId does not exists.
     * @throws ReviewPersistenceException
     *             if any other error occurred.
     */
    public void addReviewComment(long reviewId, Comment comment, String operator) throws ReviewPersistenceException {
        persistence.addReviewComment(reviewId, comment, operator);
    }

    /**
     * <p>
     * This method will add the comment to the item with given item id. Here it simply delegates this work to the
     * pluggable persistence.
     * </p>
     *
     * @param itemId
     *            the item id.
     * @param comment
     *            the <code>Comment</code> instance to be added.
     * @param operator
     *            the operator who adds the comment.
     *
     * @throws IllegalArgumentException
     *             if any argument is null, or itemId is not positive, or operator is empty string.
     * @throws ReviewEntityNotFoundException
     *             if itemId does not exists.
     * @throws ReviewPersistenceException
     *             if any other error occurred.
     */
    public void addItemComment(long itemId, Comment comment, String operator) throws ReviewPersistenceException {
        persistence.addItemComment(itemId, comment, operator);
    }

    /**
     * <p>
     * This method will get all the <code>CommentType</code> instance from the manager. Here it simply delegates
     * this work to the pluggable persistence.
     * </p>
     *
     * @return the array of all <code>CommentType</code> instances from the persistence, or empty array if no
     *         comment type can be found.
     *
     * @throws ReviewPersistenceException
     *             if failed to get the types.
     */
    public CommentType[] getAllCommentTypes() throws ReviewPersistenceException {
        return persistence.getAllCommentTypes();
    }

    /**
     * Removes the review with the specified ID. All its review items, associated comments and uploads are also
     * removed. Here it simply delegates this work to the pluggable persistence.
     *
     * @param id
     *            the ID of the review to be deleted.
     * @param operator
     *            the operator who deletes the review entity.
     *
     * @throws IllegalArgumentException
     *             if the id is not positive or operator is null/empty.
     * @throws ReviewEntityNotFoundException
     *             if review with the given ID does not exist in the database.
     * @throws ReviewPersistenceException
     *             if any other error occurred.
     *
     * @since 1.2
     */
    public void removeReview(long id, String operator) throws ReviewPersistenceException {
        persistence.removeReview(id, operator);
    }

    /**
     * <p>
     * Get the object with the specified class name and argument as the parameter of its constructor.
     * </p>
     *
     * <p>
     * <em>Changes in 1.2:</em>
     * <ol>
     * <li>Moved from Helper class.</li>
     * <li>Fixed the code to meet the TopCoder standard.</li>
     * </ol>
     * </p>
     *
     * @param className
     *            the class name to create.
     * @param typeParam
     *            the string value of the argument.
     *
     * @return the object created.
     *
     * @throws ConfigurationException
     *             if any error occurs during the creating process.
     */
    private static Object createObject(String className, String typeParam) throws ConfigurationException {
        try {
            Class<?>[] argClasses = new Class<?>[0];
            Object[] argValues = new Object[0];

            if (typeParam != null) {
                argClasses = new Class<?>[] {String.class};
                argValues = new Object[] {typeParam};
            }

            // create an object using reflection.
            return Class.forName(className).getConstructor(argClasses).newInstance(argValues);
        } catch (ClassNotFoundException cnfe) {
            throw new ConfigurationException("Error occurs, the class: '" + className + "' can't be found.", cnfe);
        } catch (SecurityException se) {
            throw new ConfigurationException("Security error occurs while initializing class: " + className, se);
        } catch (NoSuchMethodException nsme) {
            throw new ConfigurationException("Error occurs, the method can't be found for class: " + className, nsme);
        } catch (IllegalAccessException iae) {
            throw new ConfigurationException("Error occurs during creating the object for class: " + className, iae);
        } catch (InvocationTargetException ite) {
            throw new ConfigurationException("Error occurs during creating the object for class: " + className, ite);
        } catch (InstantiationException ie) {
            throw new ConfigurationException("Error occurs during creating the object for class: " + className, ie);
        }
    }

    /**
     * <p>
     * Returns the property with the given name from the namespace.
     * </p>
     *
     * <p>
     * <em>Changes in 1.2:</em>
     * <ol>
     * <li>Moved from Helper class.</li>
     * </ol>
     * </p>
     *
     * @param namespace
     *            the namespace of the configuration property.
     * @param name
     *            the name of the property.
     *
     * @return the property from the namespace with given name.
     *
     * @throws ConfigurationException
     *             if property doesn't exist or any other error occurs.
     */
    private static Property getProperty(String namespace, String name) throws ConfigurationException {
        ConfigManager cm = ConfigManager.getInstance();
        Property property = null;

        // get the property with given name.
        try {
            property = cm.getPropertyObject(namespace, name);

            // if property doesn't exist, throw exception here.
            if (property == null) {
                throw new ConfigurationException("Missing property: [" + name + "] from namespace: " + namespace);
            }
        } catch (ConfigManagerException cme) {
            throw new ConfigurationException("Error occurs when getting property: " + name + " from namespace: "
                + namespace);
        }

        return property;
    }

    /**
     * <p>
     * Gets the configuration value from the given property.
     * </p>
     *
     * <p>
     * <em>Changes in 1.2:</em>
     * <ol>
     * <li>Moved from Helper class.</li>
     * <li>Refined the code.</li>
     * </ol>
     * </p>
     *
     * @param property
     *            the container value for property.
     * @param name
     *            the name of the value.
     * @param isRequired
     *            flag indicating if value is required.
     *
     * @return the configuration value.
     *
     * @throws ConfigurationException
     *             if isRequired flag is true and value doesn't exists or the value is empty.
     */
    private static String getValue(Property property, String name, boolean isRequired) throws ConfigurationException {
        String value = property.getValue(name);

        if (value == null) {
            // if required and null.
            if (isRequired) {
                throw new ConfigurationException("Missing value: " + name + " in property: " + property.getName());
            }
        } else if (value.trim().length() == 0) {
            throw new ConfigurationException("Empty value: " + name + " in property: " + property.getName());
        }

        return value;
    }

    /**
     * <p>
     * Check the given <code>String</code> for null and empty.
     * </p>
     *
     * <p>
     * <em>Changes in 1.2:</em>
     * <ol>
     * <li>Moved from Helper class.</li>
     * </ol>
     * </p>
     *
     * @param str
     *            string to check.
     * @param paramName
     *            paramName of the argument.
     *
     * @throws IllegalArgumentException
     *             if str is null or empty string.
     */
    private static void checkString(String str, String paramName) {
        // check null
        Helper.checkNull(str, paramName);

        // check empty
        if (str.trim().length() == 0) {
            throw new IllegalArgumentException("Parameter argument: '" + paramName + "' can not be empty string!");
        }
    }
}
